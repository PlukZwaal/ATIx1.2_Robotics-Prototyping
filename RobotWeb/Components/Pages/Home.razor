@page "/"
@using System.Data.SqlClient;
@using SimpleMqtt;
@using Microsoft.Data.SqlClient;
@using ApexCharts;
@using System.Text.Json;
@using RobotWeb.Components.Services;
@rendermode InteractiveServer

<PageTitle>Robot Control Panel</PageTitle>

<div class="container">
    <div class="row">
        <div class="mb-1 text-center">
            <h1 class="">Plukkie's Schoonmaak Robot Control Panel</h1>
            <p class="">@connectionStatusText</p>
        </div>
        <div class="col-md-8">
            <div class="row">
                <div class="col-md-12 d-flex flex-ROW align-items-center gap-3">
                    <button class="btn btn-dark btn-lg w-100" @onclick='() => SendCommand("togglerobotautowalk")'>
                        @(isRobotAutoDrive ? "Stop Robot Auto Drive" : "Start Robot Auto Drive")
                    </button>
                    <button class="btn btn-warning btn-lg w-100" @onclick='() => SendCommand("stoprobot")'>
                        Stop Voor Onderhoud
                    </button>
                    <button class="btn btn-danger btn-lg w-100" @onclick='() => SendCommand("emergencystop")'>
                        NOOD STOP
                    </button>
                </div>

                <div class="row">
                    <div class="col-md-12 d-flex flex-ROW align-items-center gap-3 mt-5">
                        <button class="btn btn-dark btn-lg w-100" @onclick='() => SendCommand("dweil")'>
                            Dweil
                        </button>
                        <button class="btn btn-dark btn-lg w-100" @onclick='() => SendCommand("stofzuiger")'>
                            Stofzuiger
                        </button>
                        <button class="btn btn-dark btn-lg w-100" @onclick='() => SendCommand("blauwelaser")'>
                            Blauwe Laser
                        </button>
                    </div>
                </div>

                <div class="col-md-4 d-flex flex-column align-items-center gap-3 mt-5">
                    <button class="btn btn-dark btn-lg" @onclick='() => SendCommand("forward")'>
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor"
                            class="bi bi-arrow-up" viewBox="0 0 16 16">
                            <path fill-rule="evenodd"
                                d="M8 15a.5.5 0 0 0 .5-.5V2.707l3.146 3.147a.5.5 0 0 0 .708-.708l-4-4a.5.5 0 0 0-.708 0l-4 4a.5.5 0 1 0 .708.708L7.5 2.707V14.5a.5.5 0 0 0 .5.5" />
                        </svg>
                    </button>
                    <div class="d-flex justify-content-center gap-3">
                        <button class="btn btn-dark btn-lg" @onclick='() => SendCommand("left")'>
                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor"
                                class="bi bi-arrow-left" viewBox="0 0 16 16">
                                <path fill-rule="evenodd"
                                    d="M15 8a.5.5 0 0 0-.5-.5H2.707l3.147-3.146a.5.5 0 1 0-.708-.708l-4 4a.5.5 0 0 0 0 .708l4 4a.5.5 0 0 0 .708-.708L2.707 8.5H14.5A.5.5 0 0 0 15 8" />
                            </svg>
                        </button>
                        <button class="btn btn-danger btn-lg" @onclick='() => SendCommand("stoprobot")'>
                            Stop
                        </button>
                        <button class="btn btn-dark btn-lg" @onclick='() => SendCommand("right")'>
                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor"
                                class="bi bi-arrow-right" viewBox="0 0 16 16">
                                <path fill-rule="evenodd"
                                    d="M1 8a.5.5 0 0 1 .5-.5h11.793l-3.147-3.146a.5.5 0 0 1 .708-.708l4 4a.5.5 0 0 1 0 .708l-4 4a.5.5 0 0 1-.708-.708L13.293 8.5H1.5A.5.5 0 0 1 1 8" />
                            </svg>
                        </button>
                    </div>
                    <button class="btn btn-dark btn-lg" @onclick='() => SendCommand("backward")'>
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor"
                            class="bi bi-arrow-down" viewBox="0 0 16 16">
                            <path fill-rule="evenodd"
                                d="M8 1a.5.5 0 0 1 .5.5v11.793l3.146-3.147a.5.5 0 0 1 .708.708l-4 4a.5.5 0 0 1-.708 0l-4-4a.5.5 0 0 1 .708-.708L7.5 13.293V1.5A.5.5 0 0 1 8 1" />
                        </svg>
                    </button>
                </div>

                <div class="col-md-8 mb-4">
                    <div class="col-md-12 pt-4">
                        <div class="card shadow-sm p-1 mb-4">
                            <div class="card-body">
                                <span class="fw-bold"> Motor status: </span>
                                @if(LatestLeftMotorStatus == 0 && LatestRightMotorStatus == 0)
                                {
                                    <span>Beide motoren staan stil.</span>
                                }
                                else if((LatestLeftMotorStatus > 0 && LatestRightMotorStatus > 0) || (LatestLeftMotorStatus < 0 && LatestRightMotorStatus < 0))
                                {
                                    <span>Beide motoren draaiden</span>
                                } 
                                else if(LatestLeftMotorStatus > 0 || LatestLeftMotorStatus < 0)
                                {
                                    <span>Linker Motor draaid</span>
                                }
                                else if(LatestRightMotorStatus > 0 || LatestRightMotorStatus < 0)
                                {
                                    <span>Rechter Motor draaid</span>
                                } else {
                                    <span>Onbekende motor status</span>
                                }
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-6 mb-4">
                            <div class="card shadow-sm p-1">
                                <div class="card-body">
                                    <span class="fw-bold">Temperatuur: </span>
                                    <span>@LatestTemperature graden</span>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6 mb-4">
                            <div class="card shadow-sm p-1">
                                <div class="card-body">
                                    <span class="fw-bold">Batterij: </span>
                                    <span>@LatestBattery mv</span>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6 mb-4">
                            <div class="card shadow-sm p-1">
                                <div class="card-body">
                                    <span class="fw-bold">Luchtvochtigheid: </span>
                                    <span>@LatestHumidity %</span>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6 mb-4">
                            <div class="card shadow-sm p-1">
                                <div class="card-body">
                                    <span class="fw-bold">Lichthelderheid: </span>
                                    <span>@LatestLux lux</span>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            

            <div class="col-md-12">
                <p>Hoeveel data momenten wil je zien?</p>
            <div class="input-group">
                <input min="1" type="number" @bind="NumberOfDataMoments" class="form-control" />
                <button class="btn btn-dark" @onclick="() => LoadBigSensorData(NumberOfDataMoments)">Zoeken</button>
            </div>
                <table class="table table-striped">
                    <thead>
                        <tr>
                            <th scope="col">Timestamp</th>
                            <th scope="col">Temperature (°C)</th>
                            <th scope="col">Humidity (%)</th>
                            <th scope="col">Battery (mV)</th>
                            <th scope="col">Lux (lux)</th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (recentData.Any())
                        {
                            @foreach (var data in recentData)
                            {
                                <tr>
                                    <td>@data.Timestamp</td>
                                    <td>@data.Temperature</td>
                                    <td>@data.Humidity</td>
                                    <td>@data.Battery</td>
                                    <td>@data.Lux</td>
                                </tr>
                            }
                        }
                        else
                        {
                            <tr>
                                <td colspan="5" class="text-center">Geen recente data beschikbaar.</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div> 
        </div>

        <div class="col-md-4">
            <div class="card shadow-sm p-4 mb-5">
                <h3 class="text-dark mb-3">Recente Logs</h3>
                <div class="logbook overflow-auto">
                    @if (GetLogMessages().Any())
                    {
                        @foreach (var log in GetLogMessages())
                        {
                            <p>@((MarkupString)log)</p>
                        }
                    }
                    else
                    {
                        <p class="text-muted">Geen logs beschikbaar.</p>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private SimpleMqttClient client;
    private bool isRobotAutoDrive = false;
    private string connectionStatusText = "Zoeken naar verbinding";
    private bool isConnected = false;
    private List<SensorData> recentData = new List<SensorData>();
    private SensorData latestData;
    private int NumberOfDataMoments = 1;
    private int LatestTemperature = 0;
    private int LatestHumidity = 0;
    private int LatestBattery = 0;
    private int LatestLux = 0;
    private int LatestLeftMotorStatus = 0;
    private int LatestRightMotorStatus = 0;
    private DateTime LatestTimestamp = DateTime.Now;

    private DatabaseSensorDataService sensorDataService = new DatabaseSensorDataService();

    protected override async Task OnInitializedAsync()
    {
        LogMessages.Clear();
        client = SimpleMqttClient.CreateSimpleMqttClientForHiveMQ("robotweb");
        await client.SubscribeToTopic("robot");
        await client.SubscribeToTopic("robot/log");

        client.OnMessageReceived += async (sender, args) =>
        {
            if (args.Message == "pong" && args.Topic == "robot")
            {
                isConnected = true;
            }
            if (args.Topic == "robot/log")
            {
                string logMessage = args.Message;
                var logData = JsonSerializer.Deserialize<LogData>(logMessage);
                LatestTimestamp = DateTime.Parse(logData.Timestamp);
                LatestTemperature = (int)logData.Temperature;
                LatestHumidity = (int)logData.Humidity;
                LatestBattery = logData.Battery;
                LatestLux = logData.Lux;
                LatestLeftMotorStatus = logData.LeftSpeed;
                LatestRightMotorStatus = logData.RightSpeed;
                LogMessages.Insert(0, logMessage);
                if (LogMessages.Count > 10)
                {
                    LogMessages.RemoveAt(LogMessages.Count - 1);
                }
                InvokeAsync(StateHasChanged);
            }
        };

        _ = LoadBigSensorData(NumberOfDataMoments);
        _ = CheckConnectionAndLoadDataAsync();
    }

    private static List<string> LogMessages = new List<string>();
    public static List<string> GetLogMessages()
    {
        return LogMessages;
    }

    private async Task LoadBigSensorData(int numberOfDataMoments)
    {
        recentData = await sensorDataService.GetSensorDataAsync(numberOfDataMoments);
        latestData = recentData.FirstOrDefault();
        InvokeAsync(StateHasChanged);
    }

    private async Task CheckConnectionAndLoadDataAsync()
    {
        while (true)
        {
            await client.PublishMessage("ping", "robot");
            await Task.Delay(5000);
            if (isConnected)
            {
                connectionStatusText = "Verbonden";
            }
            else
            {
                connectionStatusText = "Geen verbinding";
            }

            isConnected = false;
            InvokeAsync(StateHasChanged);
        }
    }

    private async Task SendCommand(string command)
    {
        if (command == "togglerobotautowalk")
        {
            isRobotAutoDrive = !isRobotAutoDrive;
            command = isRobotAutoDrive ? "startrobotautowalk" : "stoprobot";
        }
        else if (isRobotAutoDrive)
        {
            isRobotAutoDrive = false;
            await client.PublishMessage("stoprobot", "robot");
        }

        await client.PublishMessage(command, "robot");
    }
}
