// using System;
// using System.Device.Gpio;
// using System.Threading;
// using Avans.StatisticalRobot;
// using SimpleMqtt;

// class Program
// {
//     static async Task Main(string[] args)
//     {
//         int ultrasonicPin = 16;
//         Ultrasonic ultrasonicSensor = new Ultrasonic(ultrasonicPin);

//         var client = SimpleMqttClient.CreateSimpleMqttClientForHiveMQ("robotnative");

//         client.OnMessageReceived += (sender, eventArgs) =>
//         {
//             Console.WriteLine($"Bericht ontvangen; topic={eventArgs.Topic}; message={eventArgs.Message};");
//         };

//         await client.SubscribeToTopic("battery");

//         Console.WriteLine("Start met het meten van de afstand...");

//         while (true)
//         {
//             int distance = ultrasonicSensor.GetUltrasoneDistance();
//             Console.WriteLine($"Afstand gemeten: {distance} cm");
//             await client.PublishMessage(distance.ToString(), "ultrasonic/distance");

//             int batteryVoltage = Robot.ReadBatteryMillivolts();
//             string batteryMessage = batteryVoltage > 2000
//                 ? $"Batterij is goed: {batteryVoltage} mV"
//                 : $"Batterij is laag: {batteryVoltage} mV";

//             Console.WriteLine(batteryMessage);
//             await client.PublishMessage(batteryMessage, "battery");
//             Thread.Sleep(1000);
//         }
//     }
// }

using System;
using System.Device.Gpio;
using System.Threading;
using Avans.StatisticalRobot;

class Program
{
    static void Main(string[] args)
    {
        int ultrasonicPin = 18;
        Ultrasonic ultrasonicSensor = new Ultrasonic(ultrasonicPin);

        while (true)
        {
            int distance = ultrasonicSensor.GetUltrasoneDistance();

            while (distance < 30)
            {
                Robot.Motors(50, 0);
                distance = ultrasonicSensor.GetUltrasoneDistance();
                Console.WriteLine($"Afstand gemeten: {distance} cm");
                if (distance < 5)
                {
                    Robot.Motors(-50, -50);
                }
                Thread.Sleep(500);
            }
            Robot.Motors(100, 100);
            Thread.Sleep(500);
        }
    }
}
